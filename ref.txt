
Week1   - spring, spring boot, jpa, spring data jpa 

week2  - transaction, caching, querydsl, REST, security, devops, docker

Week3   - Microservices, AWS

Week4   - frontend - angular, react 


    Spring 
        - core, mvc, rest, data, cloud, security, boot  
        - you will end up with 1 app (REST application)

    Microservices 
        - config server, api gateway, service discovery, ....

    Cloud / DevOps / Docker 
        - EC2 - deploy application  
        - automate the deployment using CI/CD 
        - version controlled 
        - Docker 

    - Frontend 
        - angular 
        - react


how?

Session1    - raise a new topic, discussions, demonstrations 

Session2    - hands-on, continue discussion, demonstrations 

Session3    - self study, refer to the given docs, articles, books, 

Session4    - assignments / hands-ons / practice



Environment Setup 
--------------------

    1. your own personal laptop                          2. Virtual Machine 


    a. openjdk 11
    b. eclipse / STS editor 
        - install required plugins 
    c. docker 
    d. nodejs 
    e. mysql community server / any database of your choice 
    f. vs code editor 
        - install required plugins 
    g. mongodb community server 



    Language                    library/packages                    Framework 

    Java                        standard libraries                  Spring 
                                other libraries 

    c# 

    vb 

    javascript 

    python


        |                               |                               |
    provide programming         simplify the tasks              standarize the process
    capabilities 



    build tools / dependency management tools 
        - maven / gradle 

    Testing tools 


    Tool 
        - hibernate



    Spring 
    ------------

        - core container 
            - core 
            - beans 
            - context 
            - SpEL

        - web 
            - web       - provides function such as creating web applications, rest, web services etc.
            - web-mvc   - contains spring-mvc implementations for webapplications 
            - web-socket
            - web-portlet etc. 

        - data access 
            - 
        - cloud 
        - security
        - ...



        - IOC 
            - delegates the responsibility of managing objects to something called 'Container'
            - transfer the control of objects to a container

        - Container 

            - ApplicationContext    <- interface which represents IoC container 
                - the implementations of this interface is responsible for instantiating objevts / manage the life cycle of objects 
                - ClassPathXmlApplicationContext,
                - AnnotationConfigApplicationContext, 
                - AnnotationConfigWebApplicationContext,


            - Dependency Injections 

        - Spring Beans 
            - "Bean" is an object which is managed by spring IoC Container 


        - Bean Definition / Bean Configuration 

            - Ways to define the beans

            a. xml 

                   <beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="
                        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

                    <!-- bean definitions here -->
                    
                    <bean id="product" class="demo1.bo.Product"></bean>
                    
                    <bean id="productService" class="demo1.services.ProductService"></bean>
                    
                    <bean id="productDAO" class="demo1.dao.ProductDAO"></bean>

                </beans>

            b. java 

            c. annotations 



Auto Configurations
-------------------------
    - spring boot auto configuration will automatically define beans 
            - based on presence / absence ....
                - of some properties in application.properties file 
                - of some beans 
                - of some dependencies in class path 
                - ...



Data access 
-----------------\  \
        - jdbc 
        - jdbc template 
        - orm tools 



    ORM Tools 
    -----------\    
        - object relational mapping 
        - in java data is represented in the form of "object" 
        - in rbdms systems data is represented in the form of tables 

        - hibernate 
        - toplink
        - ibatis 

        - map java object with relational table 

    
    JPA - java persistence api 
    ----------
        - specification / standard that every orm tool has to implement 

    JPA Providers
    ------------------
        - Hibernate JPA 
        - EclipseLink
        - Mybatis
        - Openjpa

    Spring Data JPA 
    ----------------
        JPA         - specification

        Hibernate   - jpa provider

        Spring Data JPA - offers repository pattern 



    Entity 
    ----------
        - Entity is an object which is managed by the persistence provider 
        - entities can be concrete as well as abstract 
        - entities also support relationships, inheritances 


            @Entity
            public class Employee {

                    @Id 
                    private int id;

                    public Employee(){

                    }
            }

    EntityManager 
    ------------------
        - used to perform all the db operations / CRUD operations 

            EntityManagerFactory factory = Persistence.createEntityManagerFactory("puname");
            EntityManager em = factory.createEntityManager();


    Persistence Unit 
    ------------------
        - named set of entities to be persisted 

            <persistence-unit name="puname">
                <provider></provider>
                <class></class>
                ....

                <properties>
                    //db properties 
                </properties>
            </persistence-unit>

    Managed entities
    -----------------
        - when an entitymanager obtains a ref to an entity, it is said to be managed 
        - A managed entity is a representation of a database table row
        - when an entity is managed, we can carry out persistence operations and the EM will automatically 
            synchronize the state of the entity with the database 

    Default Mapping 
    ---------------------
        - unless specified differently JPA provider will apply default rules for mapping 
        - table name ll be similar to class name 
        - column names will be similar to class properties 
            string          = varchar (255)
            long            = bigint 
            boolean         = smallint 
            int             = integer 

             @Entity
            public class Employee {                                         employee table 
                                                                            id      emp_name        city        salary 
                    @Id 
                    private int id;
                    private String empName;
                    private String city;
                    private double salary;


                    public Employee(){

                    }
            }




    Custom Mapping 
    -------------------
        - @Table 
        - @Column 
        - @Id --- @GeneratedValue 



    JPA 
        - standard/ specification for orm tools / persistence 

    JPA Provider 
        - ORM tool which implements Jpa specifications

    Spring Data JPA 
    ------------------
        - it is an abstraction over jpa, which offers repository pattern 



                    inteface Repository             (MArker interface)
                        |
                        |
                        |
                    Interface CrudRepository<T,ID>
                        |
                        |-> long	count()
                        |-> <S extends T>S	save(S entity)
                        |-> Optional<T>	findById(ID id)
                        |-> Iterable<T>	findAll()
                        |-> void	delete(T entity)
                        |-> void	deleteAll()
                        |
                        |
                    interface PagingAndSortingRepository<T,ID>
                        |
                        |-> Page<T>	findAll(Pageable pageable)
                        |-> Iterable<T>	findAll(Sort sort)
                        |
                    interface JPARepository<T,ID>
                        |
                        |-> List<T>	findAll() 
                        |-> <S extends T>List<S>	findAll(Example<S> example) 
                        |
                        |
                        |
                        |
                        |


**SideNote : diff between @Component @Service @Repository @Controller 



     Querying entities 
        - create custom queries using JPQL statement 

        - create custom queries using native sql statement 

        - named queries

        - Query generation methods 

        - Criteria API 

        - QueryDSL
            - used to create type safe queries in a domain specific language 
            - QueryDSL required an apt plugin (annotation processing tool) 
            - JPAAnnotationProcessor will find all the classes marked with @Entity annotation and 
                generate "Query Types" automatically  

            @Entity                             //Auto-generated QType class for Employee Entity
            class Employee {                    class QEmployee {

            }                                   }


        1. in pom.xml configure the dependencies and the plugin 

                <dependency>
                    <groupId>com.querydsl</groupId>
                    <artifactId>querydsl-apt</artifactId>
                    <version>4.0.6</version>
                    </dependency>
                <dependency>
                    <groupId>com.querydsl</groupId>
                    <artifactId>querydsl-jpa</artifactId>
                    <version>4.0.6</version>
                </dependency>

                <plugin>
                <groupId>com.mysema.maven</groupId>
                <artifactId>apt-maven-plugin</artifactId>
                <version>1.1.3</version>
                <executions>
                    <execution>
                    <phase>generate-sources</phase>
                    <goals>
                        <goal>process</goal>
                    </goals>
                    <configuration>
                        <outputDirectory>target/generated-sources/java</outputDirectory>
                        <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
                    </configuration>
                    </execution>
                </executions>
                </plugin>


        2. add the 'target/generated-sources/java' as source folder

        3. Clean the project 

        4. QTypes will be generated automatically, observe all the QTypes 

    Paging and Sorting 



    Inheritance 
        - SINGLE_TABLE
        - TABLE_PER_CLASS 
        - JOINED


    Mapping Relationships 
    -------------------------


            @OneToOne                       <-- Join Column
            @ManyToOne                      <-- Join Column


            @OneToMany                      <-- Join table 
            @ManyToMany                     <-- join table 





        1. One-to-One 
        ------------------
      
        Person{                                              DrivingLicense {
            int id;                                             int id;
            String name;                                        String licenseNumber;
            Date dob; 
                                                                @OneToOne
            @OneToOne                                           Person person;
            DrivingLicense license;

        }                                                   }


        Person      1<---------------------->1    DrivingLicense


        Persontable                                         DrivingLicense table 
        ---------------                                     ---------------------
                            FK                                                  FK
        id  name    dob     license-id                      id  licenseNumber   person-id 








        2. Many-To-Many 
        -----------------------

               class  Order {                                       class Product {
                    int id;                                             long id; 
                    Date orderDate;                                     String name; 

                    @ManyToMany                                         @ManyToMany
                    Set<Product> products;                              Set<Order> orders;

                }                                                   }


              Order   *<---------------------->*      Product 


        3. One-To-Many 

             class  Customer{                                  class   Address {
                    int id;                                         int id;

                    @OneToMany
                    Set<Address> addresses;                         String city;
                                                                    @ManyToOne
                                                                    Customer customer;

             }                                                  }


             Customer       1--------------------->*  Address
             

            customer table                                      address table 
            ---------------                                     ----------------
            id   name  dob                                      id  city street pincode 

            customer_address_table 
            ------------------------
            customer_id         address_id 


        4. Many-To-One                                               

    

    1. identify & configure the relationship between two entities using appropriate annotations 
            - determine direction & cardinality 

    2. understand / observe how these associations are represented in database 

    3. define appropriate cascade event and fetch policy when entities are associated with each other 

    4. perform db operations 

    Cascading events 
            PERSIST 
            REEMOVE 
            MERGE
            DETACH
            ALL 

    Fetch policy 
        EAGER 
        LAZY 

   


Cachinig Providers
--------------------
    - ehcache 
    - swar  m cache 
    - jboss cache 
    - OS cache 


Cache Concurrency Strategies 

    READ_ONLY 

    NONSTRICT_READ_ONLY 

    READ_WRITE 

    TRANASACTIONAL 


 Microservices
        - small and focused services for each module 
        - heterogenous - the services can be developed with diff programming languages 
            - also they can run on diff platform 
        - easy to migrate 
        - robustness 
        - services are independently scalable 
        - easy to deploy 
        - replacable and reusable 

    Monolithic Applications 
        - one big application containing all the modules 

SPRING REST
----------------

    REST - representational state transfer 

    http methods 
        - GET 
        - POST 
        - PUT 
        - PATCH 
        - DELETE 

    REST APis 

    HATEOAS 
        - Hypermedia as the engine of application state 

        HTTP://localhost:8082/api/employees 

        [
            {
                name : "xxxx", 
                city : "xxxxx", 
                phone : "xxxxxX",
                _link : {
                    self : {
                        "href" : "http://.x.x.x.x.x.x.xx."
                    }
                }
            },
            {           
                name : "xxxx", 
                city : "xxxxx", 
                phone : "xxxxxX"
            },
            {           
                name : "xxxx", 
                city : "xxxxx", 
                phone : "xxxxxX"
            },            {           
                name : "xxxx", 
                city : "xxxxx", 
                phone : "xxxxxX"
            },
        ]

    HAL 
        - Hypertext application language 
        - implementation of HATEOAS



    Spring Web application 
    --------------------------
        - RESTFul application  / REST API 
        - expose below endpoints 

            GET         http://localhost:8080/api/employees 
                            - return all the employees 

            GET         http://localhost:8080/api/employees/1
                            - return an employee with given id 

            POST        http://localhost:8080/api/employees 

                            {
                                "name" : "xxx", 
                                "city" : "xxx", 
                                "salary" : xxxx
                            }

            PUT         http://localhost:8080/api/employees/1

                            {
                                "name" : "xxx", 
                                "city" : "xxx", 
                                "salary" : xxxx
                            }
                            
            DELETE      http://localhost:8080/api/employees/1


                     



    SPRING DATA REST 
    --------------------

    SWAGGER 

   https://256335658213.signin.aws.amazon.com/console



   sudo su 
   yum update -y
   amazon-linux-extras install java-openjdk11 -y
   amazon-linux-extras install tomcat8.5 -y 


   service tomcat status 

   service tomcat start 

   cd /usr/share/tomcat/webapps 

   mkdir ROOT 
   cd ROOT 
   echo "Helloworld.. this is my 1st app" > index.html



   service tomcat stop 



code commit 
-----------------
    - offer private git repository 

    1. create a new repository 

    2. generate git credentials 

    3. set a new spring project 

    4. commit the source code 


code build 
-------------
    1. create a buildspec.yml file in source root directory 

        version: 0.2

            phases:
            install:
                runtime-versions:
                java: corretto11
            pre_build:
                commands:
                - echo Nothing to do in the pre_build phase...
            build:
                commands:
                - echo Build started on `date`
                - mvn install
            post_build:
                commands:
                - echo Build completed on `date`
            artifacts:
            files:
                - target/myapp1.war

    2. create a S3 bucket in the same region as code build project 

    3. create code build project 

    4. start the build 

    5. verify the s3 bucket and the generated artifacts 


Code deploy
---------------

        1. create a role for EC2 instance to allow access to S3 service 

        2. create a role for code deploy service 

        3. create EC2 Instance and ensure... 
            a. it has appropriate role to perform operations on S3
            b. ensure below things are installed 
                - jre 11
                - tomcat 
                - codedeploy-agent 

                commands 
                ----------
                sudo su 
                yum update -y
                amazon-linux-extras install java-openjdk11 -y
                amazon-linux-extras install tomcat8.5 -y 

                //use the documetation to install code-deploy agent 
                https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html

                 wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install



            c. it has appropriate security group to allow communication on SSH and HTTP PORT 8080

        4. create appspec.yml and required scripts to instruct code deploy agent to perform the deployment 

                version: 0.0
                os: linux
                files:
                - source: target/myapp1.war
                    destination: /usr/share/tomcat/webapps/
                hooks:
                BeforeInstall:
                    - location: scripts/before_install.sh
                    timeout: 300
                    runas: root
                AfterInstall:
                    - location: scripts/after_install.sh
                    timeout: 300
                    runas: root
                ApplicationStart:
                    - location: scripts/application_start.sh
                    timeout: 300
                    runas: root
                ApplicationStop:
                    - location: scripts/application_stop.sh
                    timeout: 300
                    runas: root



Docker
------------
    - most popular container tool 
    - package your code and dependencies in a single executable and run it on any platform 


    Docker Image 
        - self executable package that contains the code, runtime, libraries, dependencies etc. 

    Container 
        - an instance of a docker image is called 'Container'  


    1. create a docker image 

    2. store / push the docker image to some repository 
            - docker hub 
            - aws ECR 
            - gcp Container Registery 
            - ...?

    3. run the docker image 


    docker run 
    docker container ls 
    docker ps 
    docker images 
    docker build 



Microservices
-----------------
    - small services that work together 
    - most services are ...
        - small / independent applications 
        - independent deployable units 
        - basically exposed by REST
        - cloud enabled 

challenges in Microservices
        1. define boundaries            <<- design problem 

        2. configuration management     <<- spring cloud config 

        3. dynamically scale up / scale down <<- spring cloud netflix <<- load balancing / healh checks 

        4. visibility <<- spring cloud netflix <<-service registry and discovery 

        5. Monitoring, auditing, tracing 









Key components of Microservices
----------------

    1. config server 
    2. naming server / service registry and discovery 
    3. api gateway 
    4. load balancing 
    5. tracing 


config-service      8888 

limit-service       8080, 8081

xxxx-service        8082, 8083, 8084 